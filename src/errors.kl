PROGRAM errors
%NOLOCKGROUP

%include errors.klt

%include strings.klh
%include errors.klh

BEGIN
END errors
--### Private #####

--### Public #####

ROUTINE CHK_STAT
BEGIN
  IF(rec_stat <> SUCCESS) AND (rec_stat <> EXISTS) THEN
      POST_ERR(rec_stat,'',0, ER_ABORT)
  ENDIF
END CHK_STAT


ROUTINE karelError
-- Error Type:
-- 0 : WARNING
-- 1 : WARNING + SHOWN IN HISTORY
-- 2 : ABORT
------------------------------------------
BEGIN
  CLR_IO_STAT(TPDISPLAY)
  WRITE TPDISPLAY(CR,CR)
  --print message
  WRITE TPDISPLAY(str_parse(errStr, MAX_DISP_LNG),CR,CR)
  --show message
  FORCE_SPMENU(TP_PANEL, SPI_TPUSER, 1)
  --post error
  POST_ERR(stat, '', 0 , errorType)
  
END karelError

